version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: rustbot-postgres
    labels:
      logging: "enabled"
      logging_job: "postgres"
      com.docker.compose.service: "postgres"
    env_file:
      - ./../.env.proxy
      - ./.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - rustbot-main
      - database-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rustbot} -d ${POSTGRES_DB:-rustbot}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: rustbot-pgadmin
    labels:
      logging: "enabled"
      logging_job: "pgadmin"
      com.docker.compose.service: "pgadmin"
    env_file:
      - ./../.env.proxy
      - ./.env
    environment:
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
      - ./pgadmin/pgpass:/pgadmin4/pgpass:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rustbot-main
      - database-internal
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  rustbot-main:
    external: true
  database-internal:
    driver: bridge
    internal: false

volumes:
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local